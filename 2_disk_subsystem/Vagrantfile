# -*- mode: ruby -*-

require 'open3'
require 'fileutils'

$script_install_packages = <<'END'
set -e
yum install -y mdadm smartmontools hdparm gdisk
mdadm --create --verbose /dev/md/test_raid_5 --level raid5 --raid-devices 5 /dev/sd[bcdef]
mkdir /etc/mdadm
echo "DEVICE partitions  # no containers" >> /etc/mdadm/mdadm.conf
mdadm --detail --scan --verbose >> /etc/mdadm/mdadm.conf
dracut -fv

raid=/dev/md/test_raid_5

parted $raid mklabel gpt

# Create 5 partitions

for i in $(seq 5); do
  parted $raid mkpart primary ext4 $((100/5*($i-1)))% $((100/5*$i))%
done

# Make FS and mount
for i in $(seq 5); do
  part=${raid}p$i
  mount_dest=/raid/part$i

  ### Wait for partition special file to appear
  ### How to do it without waiting?
  until [ -e $part ]; do sleep 1; done

  mkfs.ext4 $part
  mkdir -pv $mount_dest
  mount $part $mount_dest

  echo ${raid}p$i /raid/part$i ext4 defaults 0 0 >> /etc/fstab
done


END

MACHINES = {
  :server => {},
  :to_raid_1 => {}
}

def virtualbox_vm_info(vm_name)
  return if vm_name.empty?
  stdout, stderr, status  = Open3.capture3("VBoxManage showvminfo --machinereadable '#{vm_name}'")
  raise stderr if status.exitstatus.nonzero?
  return stdout
end


def get_vm_id(name="default")
  file = ".vagrant/machines/" + name.to_s + "/virtualbox/id"
  if File.exist?(file)
    File.read(file)
  end
end
  

def virtualbox_add_storage_controller(config, name, type)
  config.vm.provider "virtualbox" do |v|
    v.customize [ "storagectl", :id,
                  "--name", name,
                  "--add", type ]
  end
end


def virtualbox_create_disk_file(config, filename, size)
  config.vm.provider "virtualbox" do |v|
    v.customize [ "createmedium", "disk", "--filename", filename, "--size", size ]
  end
end


def virtualbox_attach_disk(config, ctl_name, ctl_port, filename)
  config.vm.provider "virtualbox" do |v|
    v.customize [ "storageattach", :id, "--storagectl", ctl_name,
                  "--port", ctl_port,
                  "--type", "hdd",
                  "--medium", filename ]
  end
end


def add_disks(config_obj, name)

  vbox_vm_id = get_vm_id(name)
  
  begin
    vm_info = virtualbox_vm_info(vbox_vm_id)
  rescue => e
  end

  #### Disk configuration
  sata_controller_name = "SATA#1"
  nvme_controller_name = "NVME#1"
  has_sata = false
  has_nvme = false
  disk_dir = "#{name}_disks"

  disks = []
  6.times do
    disks << { type: "sata", size: 250 }
  end

  5.times do
    disks << { type: "nvme", size: 250 }
  end
  #### 

  if !File.directory?(disk_dir)
    FileUtils.mkdir_p(disk_dir)
  end


  if vm_info
    params = {}
    for line in vm_info.split(/\n/)
      key, value = line.split("=", 2).map { |x| x.sub(/"(.*)"/) { $1 } }
      params[key] = value
    end

    params.each do |k, v|
      if k =~ /storagecontrollertype(\d+)/ && v.downcase == "intelahci"
        has_sata = true
        sata_controller_name = params["storagecontrollername" + $1]
      end

      if k =~ /storagecontrollername(\d+)/ && v == nvme_controller_name
        has_nvme = true
      end
    end
  end
    
    

  unless has_nvme
    virtualbox_add_storage_controller(config_obj, name = nvme_controller_name, type = "pcie")
  end


  unless has_sata
    virtualbox_add_storage_controller(config_obj, name = sata_controller_name, type = "sata")
  end

  disks.reduce({}) { |h, el| (h[ el[:type] ] ||= []) << el; h }.each do |type, disks|
    disks.each_with_index do |el, i|
      
      # Assume boot disk is on SATA port 0
      # Also start from NVME port 0, VM can't see disks otherwise
      port = (type == "sata") ? i + 1 : i 

      filename = "#{disk_dir}/#{ type }_#{ i.to_s }.vdi"
      virtualbox_create_disk_file(config_obj, filename, el[:size]) unless File.exist?(filename)
      virtualbox_attach_disk(config_obj,
                             (type == "sata") ?
                               sata_controller_name :
                               (type == "nvme") ? nvme_controller_name : nil,
                             port,
                             filename)
    end
  end
end


Vagrant.configure("2") do |config|

  config.vm.synced_folder ".", "/vagrant", disabled: true
  
  MACHINES.each do |boxname, boxconfig|

    config.vm.define boxname do |box|
      box.vm.box = "centos/7"
      
      box.vm.provider "virtualbox" do |v|
        v.memory = 1024
        v.cpus = 1
      end

      if boxname == :server
        add_disks( box, boxname )
        box.vm.provision "shell" do |s|
          s.inline = $script_install_packages
          s.reboot = true
        end
      end

      if boxname == :to_raid_1
        
        begin
          vm_info = virtualbox_vm_info( get_vm_id(boxname) )
        rescue => e
        end

        if vm_info
          params = {}
          for line in vm_info.split(/\n/)
            key, value = line.split("=", 2).map { |x| x.sub(/"(.*)"/) { $1 } }
            params[key] = value
          end

          controller = nil
          attached = nil
          filename = "#{boxname}_disk.vdi"
          params.each do |k, v|
            if k =~ /(.*)-ImageUUID-(.*)/
              controller = $1
            end

            if v =~ /#{filename}/
              attached = true
            end
          end
          box.vm.provider "virtualbox" do |vbox|
            vbox.customize [ "clonemedium", "disk", v, filename, "--format", "vdi" ] if !File.exist?(filename)
            vbox.customize [ "storageattach", :id, "--storagectl", controller,
                             "--device", 0,
                             "--port", 1,
                             "--type", "hdd",
                             "--medium", filename ] if !attached
          end

        end

        box.vm.provision "shell", inline: "echo RUN '\"vagrant up\"' AGAIN TO GET 2nd DISK; poweroff"
      end

    end
  end
end

