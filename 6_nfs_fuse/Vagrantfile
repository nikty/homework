# -*- mode: ruby -*-
# vi: set ft=ruby :

MACHINES = {
  :server => {
    :box => "opensuse/Leap-15.3.x86_64",
  },
  :client => {
    :box => "opensuse/Leap-15.3.x86_64",
  },
  :kdc => {
    :box => "opensuse/Leap-15.3.x86_64",
  }
}

Vagrant.configure("2") do |config|

  config.vm.provider "virtualbox" do |vb|
    vb.memory = 512
  end

  MACHINES.each do |boxname, boxconfig|

    config.vm.define boxname do |box|
      box.vm.box = boxconfig[:box]

    end
  end

  # Server
  config.vm.define :server do |box|
    box.vm.network "private_network", ip: "192.168.56.10"

    box.vm.provision "configure_firewall", type: "shell" do |s|
      s.inline = '
# Install firewall packages
zypper in -y firewalld
systemctl enable --now firewalld

# Add interface serving NFS to public zone
firewall-cmd --permanent --zone=public --change-interface=eth1

# Create firewalld service for NFS RPC
firewall-cmd --permanent --new-service=nfs-rpc
for p in 21001 21002 21003; do
  firewall-cmd --permanent --service=nfs-rpc --add-port $p/tcp --add-port $p/udp
done
firewall-cmd --reload

# Allow NFS services
firewall-cmd --zone=public --add-service=nfs-rpc --add-service=rpc-bind --add-service=nfs --add-service=nfs3
firewall-cmd --runtime-to-permanent
'
    end
    
    box.vm.provision "install_nfs_server", type: "shell",
                     inline: "zypper in -y nfs-kernel-server"
    
    box.vm.provision "configure_nfs", type: "shell" do |s|
      s.inline = <<'END'
mkdir -pv /srv/nfs/upload

chmod 777 /srv/nfs/upload                               # allow everyone

echo '/srv/nfs *(rw) ' >> /etc/exports                  # export share

systemctl enable --now nfsserver                        # start NFS server

# Bind static ports for use with firewall
for opt in MOUNTD_PORT=21001 STATD_PORT=21002 LOCKD_TCPPORT=21003 LOCKD_UDPPORT=21003; do
  param=${opt%%=*}
  val=${opt##*=}
  { grep "^$param" /etc/sysconfig/nfs >/dev/null 2>&1 &&
      sed -i "s/^$param.*/$param=\"$val\"/" /etc/sysconfig/nfs
  } || echo "$param=\"$val\"" >> /etc/sysconfig/nfs
done

systemctl restart nfsserver
END

      box.vm.provision "kerberos_nfs_server", type: "shell", run: "never",
                       path: "scripts/kerberos_nfs_server_config.sh"

    end

  end

  # Client
  config.vm.define :client do |box|
    box.vm.network "private_network", ip: "192.168.56.20"

    box.vm.provision "install_nfs_client", type: "shell",
                     inline: "zypper in -y nfs-client"

    box.vm.provision "mount_nfs_at_boot_fstab", type: "shell",
                     inline: '
echo "192.168.56.10:/srv/nfs /mnt nfs rw,nfsvers=3,udp 0 0" >> /etc/fstab
'

    box.vm.provision "kerberos_nfs_client", type: "shell", run: "never",
                     path: "scripts/kerberos_nfs_client_config.sh"
  end

  # KDC
  config.vm.define :kdc do |box|
    box.vm.network "private_network", ip: "192.168.56.30"

    box.vm.provision "kerberos_kdc", type: "shell", run: "never" do |s|
      s.path = "scripts/kerberos_kdc_config.sh"
    end
    
  end

  config.vm.provision "opensuse_disable_error_repo", type: "shell",
                      inline: "
grep -i opensuse /etc/os-release >/dev/null 2>&1 || exit 1

#--- Disable repo because of the 'update cache' error
zypper modifyrepo --disable repo-backports-update
#---
"
  config.vm.provision "opensuse_enable_docs", type: "shell",
                      inline: "
grep -i opensuse /etc/os-release >/dev/null 2>&1 || exit 1

config=/etc/zypp/zypp.conf
{ grep '^rpm.install.excludedocs' $config >/dev/null 2>&1 &&
    sed -i 's/^rpm.install.excludedocs.*/rpm.install.excludedocs = no/' $config ; } ||
echo 'rpm.install.excludedocs = yes' >> $config

zypper in -y man
"
end
